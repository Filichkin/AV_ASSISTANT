import asyncio
from typing import Any, Dict, List, Optional

from langchain_huggingface import HuggingFaceEmbeddings
from langchain_postgres.vectorstores import PGVector
from loguru import logger
from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import ErrorData, INTERNAL_ERROR, INVALID_PARAMS
from mcp.server.sse import SseServerTransport
from sqlalchemy import create_engine, text
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.routing import Route, Mount
import torch
import uvicorn

from config import get_db_url, settings
from .utils import build_price_filter, extract_price_range


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "products"
mcp = FastMCP('products')


class PGVectorSessionManager:
    _instance: Optional['PGVectorSessionManager'] = None
    _store: Optional[PGVector] = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def get_store(self) -> PGVector:
        if self._store is None:
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector...')
            engine = create_engine(get_db_url())
            with engine.begin() as conn:
                conn.execute(text('CREATE EXTENSION IF NOT EXISTS vector'))

            logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...')
            embeddings = HuggingFaceEmbeddings(
                model_name=settings.LLM_MODEL_NAME,
                model_kwargs={
                    'device': 'mps' if torch.backends.mps.is_available()
                    else 'cpu'
                },
                encode_kwargs={'normalize_embeddings': True},
            )

            logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PGVector...')
            self._store = PGVector(
                connection=get_db_url(),
                collection_name=settings.COLLECTION_NAME,
                embeddings=embeddings,
                use_jsonb=True,
            )

            logger.success('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL/pgvector')
        return self._store


def connect_to_pgvector() -> PGVector:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (pgvector) –∫–∞–∫ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É."""
    try:
        return PGVectorSessionManager().get_store()
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL/pgvector: {e}')
        raise


async def async_connect_to_pgvector() -> PGVector:
    return await asyncio.to_thread(connect_to_pgvector)


def search_products(
    query: str,
    metadata_filter: Optional[Dict[str, Any]] = None,
    k: int = 3,
    min_similarity: float = settings.DEFAULT_MIN_SIMILARITY,
) -> List[Dict[Any, Any]]:
    """
    –ü–æ–∏—Å–∫ –Ω–æ—É—Ç–±—É–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –≤ PostgreSQL/pgvector.

    Args:
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.
        metadata_filter (dict | None): –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        (–¥–ª—è PGVector –ø—Ä–∏ use_jsonb=True ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–∞–º).
        k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Returns:
        list[dict]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫–æ—Ä–æ–º.
    """
    try:
        store = connect_to_pgvector()

        # –í PGVector –¥–æ—Å—Ç—É–ø–µ–Ω similarity_search_with_score.
        # –ü–∞—Ä–∞–º–µ—Ç—Ä filter —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏
        # PGVector —Å use_jsonb=True.
        results = store.similarity_search_with_score(
            query,
            k=k,
            filter=metadata_filter
            )

        logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}')
        logger.info(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {results}')

        formatted_results = []
        for doc, score in results:
            if score < min_similarity:
                continue
            formatted_results.append(
                {
                    "text": doc.page_content,
                    "metadata": doc.metadata,
                    "score": score
                }
            )
            logger.info(f'–ù–∞–π–¥–µ–Ω–æ {formatted_results}')
        return formatted_results

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ PGVector: {e}')
        raise


async def async_search_products(
    query: str,
    metadata_filter: Optional[Dict[str, Any]] = None,
    k: int = 3,
) -> List[Dict[str, Any]]:
    return await asyncio.to_thread(search_products, query, metadata_filter, k)


@mcp.tool()
async def get_searched_products(query: str) -> str:
    """
    –ü–æ–∏—Å–∫ –Ω–æ—É—Ç–±—É–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –≤ PostgreSQL/pgvector.

    Args:
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.
        metadata_filter (dict | None): –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        (–¥–ª—è PGVector –ø—Ä–∏ use_jsonb=True ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–∞–º).
        k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Usage:
        get_searched_products('–ö–∞–∫–æ–π —É –≤–∞—Å —Å–∞–º—ã–π –ª—É—á—à–∏–π –Ω–æ—É—Ç–±—É–∫ Lenovo?')
        get_searched_products('–º–Ω–µ –Ω—É–∂–µ–Ω –Ω–æ—É—Ç–±—É–∫ Apple –¥–æ 50000')
        get_searched_products('—Ö–æ—á—É –Ω–æ—É—Ç–±—É–∫ –æ—Ç 30000 –¥–æ 50000 —Ä—É–±–ª–µ–π')
    """
    logger.info(f'–ù–∞–π–¥–µ–Ω–æ: {query}')
    try:
        if not query:
            raise McpError(
                ErrorData(
                    code=INVALID_PARAMS,
                    message='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
                )
            )
        min_price, max_price = extract_price_range(query)
        metadata_filter = build_price_filter(min_price, max_price)
        logger.info(f'–¶–µ–Ω–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä: {metadata_filter}')

        products_data = await async_search_products(
            query.strip(),
            metadata_filter=metadata_filter
            )
        if not products_data:
            return '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'

        result_lines = []
        for product in products_data:
            description = product['text']
            price = product['metadata'].get('price')
            product_link = product['metadata'].get('product_link')
            result_lines.append(
                f'–¢–æ–≤–∞—Ä: {description} –¶–µ–Ω–∞: {price} —Ä—É–±. '
                f'–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_link}'
            )
        return '\n'.join(result_lines)

    except Exception as e:
        if isinstance(e, McpError):
            raise
        raise McpError(
            ErrorData(
                code=INTERNAL_ERROR,
                message=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö: {str(e)}'
            )
        ) from e


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
sse = SseServerTransport('/messages/')


async def handle_sse(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    _server = mcp._mcp_server
    async with sse.connect_sse(
        request.scope,
        request.receive,
        request._send,
    ) as (reader, writer):
        await _server.run(
            reader,
            writer,
            _server.create_initialization_options()
        )


# –°–æ–∑–¥–∞–Ω–∏–µ Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Starlette(
    debug=True,
    routes=[
        Route('/sse', endpoint=handle_sse),
        Mount('/messages/', app=sse.handle_post_message),
    ],
)

# if __name__ == '__main__':
#     for product in search_products(
#         query='–∫–∞–∫–æ–π —É –≤–∞—Å —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –ø—ã–ª–µ—Å–æ—Å?'
#     ):
#         print(product)


if __name__ == '__main__':
    print('–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É...')
    print('üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8001')
    print('üîó SSE endpoint: http://localhost:8001/sse')
    print('üìß Messages endpoint: http://localhost:8001/messages/')
    print('üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:')
    print('   - get_searched_products(query) - –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É')

    uvicorn.run(app, host='0.0.0.0', port=8001)
