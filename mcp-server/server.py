from typing import Any, Dict, List, Optional

import uvicorn
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.routing import Route, Mount

from loguru import logger
from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import ErrorData, INTERNAL_ERROR, INVALID_PARAMS
from mcp.server.sse import SseServerTransport

import torch
from sqlalchemy import create_engine, text

from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores.pgvector import PGVector

from config import get_db_url
from config import settings


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "products"
mcp = FastMCP('products')


def connect_to_pgvector() -> PGVector:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (pgvector) –∫–∞–∫ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É."""
    try:
        logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector...')
        engine = create_engine(get_db_url())

        with engine.begin() as conn:
            conn.execute(text('CREATE EXTENSION IF NOT EXISTS vector'))

        logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...')
        embeddings = HuggingFaceEmbeddings(
            model_name=settings.LLM_MODEL_NAME,
            model_kwargs={
                'device': 'mps' if torch.backends.mps.is_available() else 'cpu'
                },
            encode_kwargs={'normalize_embeddings': True},
        )

        logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PGVector...')
        store = PGVector(
            connection_string=get_db_url(),
            collection_name=settings.COLLECTION_NAME,
            embedding_function=embeddings,
            use_jsonb=True,  # —É–¥–æ–±–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å metadata –≤ JSONB
        )

        logger.success('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL/pgvector')
        return store

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL/pgvector: {e}')
        raise


def search_products(
    query: str,
    metadata_filter: Optional[Dict[str, Any]] = None,
    k: int = 4,
) -> List[Dict[str, Any]]:
    """
    –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –≤ PostgreSQL/pgvector.

    Args:
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.
        metadata_filter (dict | None): –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        (–¥–ª—è PGVector –ø—Ä–∏ use_jsonb=True ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–∞–º).
        k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Returns:
        list[dict]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∫–æ—Ä–æ–º.
    """
    try:
        store = connect_to_pgvector()

        # –í PGVector –¥–æ—Å—Ç—É–ø–µ–Ω similarity_search_with_score.
        # –ü–∞—Ä–∞–º–µ—Ç—Ä filter —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏
        # PGVector —Å use_jsonb=True.
        results = store.similarity_search_with_score(
            query,
            k=k,
            filter=metadata_filter
            )

        logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}')

        formatted_results = []
        for doc, score in results:
            formatted_results.append(
                {
                    "text": doc.page_content,
                    "metadata": doc.metadata,
                    "similarity_score": score,
                }
            )
        return formatted_results[0]

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ PGVector: {e}')
        raise


@mcp.tool()
async def get_searched_products(query: str) -> str:
    """
    –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –≤ PostgreSQL/pgvector.

    Args:
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.
        metadata_filter (dict | None): –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        (–¥–ª—è PGVector –ø—Ä–∏ use_jsonb=True ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–∞–º).
        k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Usage:
        get_searched_products('–∫–∞–∫–æ–π —É –≤–∞—Å —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –ø—ã–ª–µ—Å–æ—Å?')
        get_searched_products('—Ö–æ—á—É —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ 30000')
    """

    try:
        if not query:
            raise McpError(
                ErrorData(
                    code=INVALID_PARAMS,
                    message='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
                )
            )

        products_data = await search_products(query.strip())
        logger.info(f'–ù–∞–π–¥–µ–Ω–æ {products_data}')
        if not products_data:
            return '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
        description = products_data['text']
        price = products_data['metadata']['price']
        result = f'–¢–æ–≤–∞—Ä: {description} –¶–µ–Ω–∞: {price}'
        return result
        # result_lines = []
        # for product in products_data:
        #     description = product['text']
        #     price = product['metadata']['price']
        #     result_lines.append(f'–¢–æ–≤–∞—Ä: {description} –¶–µ–Ω–∞: {price}')

        # return '\n'.join(result_lines)

    except Exception as e:
        if isinstance(e, McpError):
            raise
        raise McpError(
            ErrorData(
                code=INTERNAL_ERROR,
                message=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö: {str(e)}'
            )
        ) from e


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
sse = SseServerTransport('/messages/')


async def handle_sse(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    _server = mcp._mcp_server
    async with sse.connect_sse(
        request.scope,
        request.receive,
        request._send,
    ) as (reader, writer):
        await _server.run(
            reader,
            writer,
            _server.create_initialization_options()
        )


# –°–æ–∑–¥–∞–Ω–∏–µ Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Starlette(
    debug=True,
    routes=[
        Route('/sse', endpoint=handle_sse),
        Mount('/messages/', app=sse.handle_post_message),
    ],
)

# if __name__ == '__main__':
#     for product in search_products(
#         query='–∫–∞–∫–æ–π —É –≤–∞—Å —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –ø—ã–ª–µ—Å–æ—Å?'
#     ):
#         print(product)


if __name__ == '__main__':
    print('–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É...')
    print('üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8001')
    print('üîó SSE endpoint: http://localhost:8001/sse')
    print('üìß Messages endpoint: http://localhost:8001/messages/')
    print('üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:')
    print('   - get_searched_products(query) - –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É')

    uvicorn.run(app, host='0.0.0.0', port=8001)
